// // ./src/index.ts

// ///...

// /* Fazemos a modifica√ß√£o da nossa fun√ß√£o approvedStudents */
// const approvedStudents = ({ disciplines, school }: Student): boolean =>
//   disciplines.every(({ grade }) => (
//     school === 'Standard' ? grade >= 0.7 : grade >= 0.8
//   ));

// /* Abaixo temos o exemplo de execu√ß√£o com algumas adi√ß√µes */
// const studentsExample = [
//   {
//     name: 'Lee',
//     school: 'Standard',
//     disciplines: [
//       { name: 'matem√°tica', grade: 0.8 },
//       { name: 'hist√≥ria', grade: 0.9 },
//     ],
//   },
//   {
//     name: 'Albus',
//     school: 'Hogwarts',
//     disciplines: [
//       { name: 'divination', grade: 0.8 },
//       { name: 'potions', grade: 0.9 },
//     ],
//   },
// ];

// setApproved(studentsExample);

// Essa solu√ß√£o funciona, mas n√£o est√° boa! N√≥s tivemos que mudar nossa fun√ß√£o para acrescentar o novo comportamento a ela! O que acontecer√° quando surgir uma terceira escola? Talvez uma quarta, quinta, etc? ü§î

// Pois bem, conforme estabelecemos no in√≠cio, o que o princ√≠pio aberto/fechado nos diz √© que devemos ser capazes de estender um comportamento de uma fun√ß√£o sem modificar seus comportamentos j√° existentes.

// Beleza, mas o que isso significa? Significa que voc√™ n√£o deve precisar alterar trechos de c√≥digo existentes para acrescentar um novo comportamento. Veja bem: quando um c√≥digo funciona e est√° em produ√ß√£o numa aplica√ß√£o enorme, queremos evitar mudar aquilo que j√° existe e funciona.

// Por√©m, todo c√≥digo precisa ser atualizado com o tempo. Como podemos, ent√£o, atualizar o nosso c√≥digo sem alterar o que j√° existe? ü§î Buscando realizar a escrita de c√≥digo de modo que, no futuro, possamos acrescentar comportamentos sem mudar os j√° existentes.